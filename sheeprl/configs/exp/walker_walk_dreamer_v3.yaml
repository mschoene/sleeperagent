# @package _global_

defaults:
  - override /algo: dreamer_v3_S
  - override /env: dmc
  # - override hydra/hydra_logging: disabled
  # - override hydra/job_logging: disabled
  - _self_

env:
  id: walker_walk
  capture_video: True  # Enable rendering
  frame_stack: 1  # Single frame for simplicity


algo:
  cnn_keys:
    encoder: [rgb_wrist]
    decoder: [rgb_wrist]
  mlp_keys:
    encoder: []
  total_steps: 100
  per_rank_batch_size: 2
  dense_units: 64
  mlp_layers: 2
  # cnn_channels_multiplier: 4
  # clip_gradients: 1.0
  # learning_rate: 1e-5


# Checkpoint
checkpoint:
  every: 20

# Buffer
buffer:
  size: 50000
  checkpoint: True

metric:
  aggregator:
    metrics:
      Loss/world_model_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/value_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/policy_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/observation_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/reward_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/state_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/continue_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      State/kl:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      State/post_entropy:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      State/prior_entropy:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Grads/world_model:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Grads/actor:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Grads/critic:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}

